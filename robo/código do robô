import robocode.*;
import robocode.util.Utils;

public class BestRobotEver extends AdvancedRobot {
    private double enemyHeading = 0;  // To store the enemy's heading
    private double enemyDistance = 0; // Distance to the enemy
    private double lastGunHeat = 0;  // To track gun heat for adaptive firing

    public void run() {
        setAdjustRadarForGunTurn(true);
        setAdjustGunForRobotTurn(true);

        // Infinite loop for robot's actions
        while (true) {
            // Move in a circular pattern to avoid being predictable
            setTurnRight(100);
            setAhead(100);
            execute();
        }
    }

    // On scanned robot event, fire at the enemy intelligently
    public void onScannedRobot(ScannedRobotEvent event) {
        double enemyBearing = event.getBearing();
        enemyDistance = event.getDistance();
        enemyHeading = event.getHeading();

        // Update radar to lock on the enemy
        setTurnRadarRight(Utils.normalRelativeAngle(enemyBearing - getRadarHeading()));

        // Predict where the enemy will be
        double predictedX = getX() + (Math.sin(Math.toRadians(enemyHeading)) * enemyDistance);
        double predictedY = getY() + (Math.cos(Math.toRadians(enemyHeading)) * enemyDistance);

        // Aim at the predicted position
        double angleToTarget = Math.atan2(predictedX - getX(), predictedY - getY());
        double gunTurn = Utils.normalRelativeAngle(angleToTarget - getGunHeading());

        // Adjust gun and fire at the enemy
        setTurnGunRight(gunTurn);
        if (getGunHeat() == 0) {
            if (enemyDistance < 200) {
                fire(3);  // High power at close range
            } else if (enemyDistance < 400) {
                fire(2);  // Medium power at medium range
            } else {
                fire(1);  // Low power at long range
            }
        }

        // Evasive movement: Change direction randomly to make it harder to predict
        if (Math.random() < 0.5) {
            setTurnRight(Math.random() * 180);
            setAhead(50);
        } else {
            setTurnLeft(Math.random() * 180);
            setAhead(50);
        }

        execute(); // Execute all commands
    }

    // On hit event, make an evasive maneuver
    public void onHitWall(HitWallEvent event) {
        // Bounce off the wall and go in the opposite direction
        setBack(50);
        setTurnRight(90);
        execute();
    }

    // On hit robot event, fire at the enemy robot if you're close
    public void onHitRobot(HitRobotEvent event) {
        if (event.isMyFault()) {
            // If you ran into them, back up a bit and turn away
            setBack(50);
            setTurnRight(90);
            execute();
        }
        // Fire when you're near another robot
        if (getGunHeat() == 0) {
            fire(3);
        }
    }
}
